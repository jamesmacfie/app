'use strict';Router.route('rooms', {		name: 'roomList',		data: function() {				return {						rooms: Rooms.find(),						title: 'Your rooms'				};		},		waitOn: function() {				return [					Router.globalSubscription.subscribe('userRooms'),					Router.globalSubscription.subscribe('userHubSensors'),					Router.globalSubscription.subscribe('sensorTypes')				];		}});Router.route('rooms/insert', {	name: 'roomInsert'});Router.route('rooms/:_id', {	name: 'room',	data: function() {		var room = Rooms.findOne(this.params._id),			sensors = [];		if (room) {			sensors = Sensors.find({				_id: {					$in: room.sensors				}			});		}		return {			room: room,			sensors: sensors,			title: room ? room.name : '',			prev: true		};	},	fastRender: true,	waitOn: function() {		return [			Router.globalSubscription.subscribe('userRooms'),			Router.globalSubscription.subscribe('userHubSensors'),			Router.globalSubscription.subscribe('userDataPoints')		];	}});Router.route('rooms/:_id/assignSensor', {	name: 'sensorAssign',	data: function() {		// Don't return sensors that already belong to this room		var room = Rooms.findOne(this.params._id);		return {			room: room,			sensors: Sensors.find({				_id: {					$nin: room.sensors				}			}),			title: 'Add a new sensor'		};	},	waitOn: function() {		return [			Router.globalSubscription.subscribe('userRooms'),			Router.globalSubscription.subscribe('userHubSensors')			//Meteor.subscribe('exclRoomSensors', this.params._id)		];	}});